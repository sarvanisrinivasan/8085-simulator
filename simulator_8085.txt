#include<stdio.h>
int spacing(int i, char ch[50])
{
    if(ch[i]==32)
    {
        i++;
    }
    return i;
}
int nulling(char ab[20])
{
    int i=0;
    while(ab[i]!=0)
    {
        ab[i]=0;
        i++;
    }
}
int transfer(int i, char ab[20], char ch[50], int l)
{
    int s=0;
    for(int j=i;j<l;j++)
    {
        ab[s]=ch[j];
        s++;
    }
}
int strlen(char ch[50])
{
    int i=0;
    while(ch[i]!=0)
    {
        i++;
    }
    return i;
}
int convert(int i,int l,char ch[50])
{
    int c=0x1;
    int num=0;
    for(int j=l-1;j>=i;j--)
    {
       num+=(ch[j]-48)*c;
       c*=0x10;
    }
    return num;
}
int convert1(char ab[20],int num)
{
    int i=0;
    int c=0x10;
    int mem=num;
    while(mem>=10)
    {
        mem/=c;
        c*=0x10;
    }
    while(c!=0)
    {
        ab[i]=(num/c)+48;
        num%=c;
        c/=0x10;
        i++;
    }
}
int arrayassign(int arr[8],int a, int b, int c, int d, int e, int f, int g, int h)
{
    arr[0]=a;
    arr[1]=b;
    arr[2]=c;
    arr[3]=d;
    arr[4]=e;
    arr[5]=f;
    arr[6]=g;
    arr[7]=h;
}
int zeros(char b)
{
    if(b==0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int parity(char a)
{
    char q=0b0;
    int h=0;
    while((a&0xff)!=0b0)
    {
        q=(a&0xff)%0b10;
        if(q==1)
        {
            h++;
        }
        a=(a&0xff)/0b10;
    }
    if((h%2==0)&&(h!=0))
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int sign(char a)
{
    if(((a&0XFF)/0X10)>=0x8)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int auxcarry(int a,int b)
{
    char q=(a&0XFF)%0x10;
    char v=(b&0XFF)%0x10;
    char g=((q+v)&0XFF)/0x10;
    if(g==1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int auxcarry1(int a, int b)
{
    char q=((a&0XFF)%0X10)&0XFF;
    char n=((b&0XFF)%0X10)&0XFF;
    if(q>n)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}
char flagreg(int u[4])
{
    char q=0;
    q=u[0]+0*0b10+u[3]*0b100+0*0b1000+u[4]*0b10000+0*0b100000+u[1]*0b1000000+u[2]*0b10000000;
    return q;
}
char flagdiv(int u[4],unsigned char a)
{
    u[0]=a%0b10;
    a=a/0b100;
    u[3]=a%0b10;
    a=a/0b100;
    u[4]=a%0b10;
    a=a/0b100;
    u[1]=a%0b10;
    a/=0b10;
    u[2]=a%0b10;
}
int assignment(int arr[8],int b, char reg[7],unsigned int reg1[2],unsigned char RAM[0xFFFF])
{
    int mem=((reg[5]&0XFF)*0x100)+(reg[6]&0XFF);
    int c=0;
    if(b!=8)
    {
        for(int p=0;p<=6;p++)
        {
            if(RAM[reg1[0]]==arr[p])
            {
                if(b!=7)
                {
                 reg[b]=reg[p];
                 c=1;
                }
                else
                {
                    RAM[mem]=reg[p];
                    c=1;
                }
                break;
            }
        }
        if(RAM[reg1[0]]==arr[7])
        {
            reg[b]=RAM[mem];
            c=1;
        }
    }
    else
    {
        for(int p=0;p<=6;p++)
        {
            if(RAM[reg1[0]]==arr[p])
            {
                reg1[0]=reg1[0]+1;
                reg[p]=RAM[reg1[0]];
                c=1;
                break;
            }
        }
        if(RAM[reg1[0]]==arr[7])
        {
            reg1[0]=reg1[0]+1;
            RAM[mem]=RAM[reg1[0]];
            c=1;
        }
    }
    return c;
}
int additionone(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    int mem=((reg[5]&0xFF)*0x100)+(reg[6]&0XFF);
    for(int p=0;p<=6;p++)
       {
           if(RAM[reg1[0]]==arr[p])
           {
               int x=((reg[0]&0XFF)+(reg[p]&0XFF));
               u[4]=auxcarry(reg[0],reg[p]);
               u[0]=x/0x100;
               reg[0]+=reg[p];
               c=1;
               u[2]=sign(reg[0]);
               u[1]=zeros(reg[0]);
               u[3]=parity(reg[0]);
               break;
           }
       }
       if(RAM[reg1[0]]==arr[7])
       {
           int x=((reg[0]&0XFF)+(RAM[mem]&0XFF));
           u[4]=auxcarry(reg[0],RAM[mem]);
           u[0]=x/0x100;
           reg[0]+=RAM[mem];
           c=1;
           u[2]=sign(reg[0]);
           u[1]=zeros(reg[0]);
           u[3]=parity(reg[0]);
       }
       return c;
}
int additiononewithc(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    int mem=((reg[5]&0XFF)*0x100)+(reg[6]&0XFF);
    for(int p=0;p<=6;p++)
       {
           if(RAM[reg1[0]]==arr[p])
           {
               int x=((reg[0]&0XFF)+(reg[p]&0XFF)+u[0]);
               u[4]=auxcarry(reg[0],reg[p]+u[0]);
               reg[0]=reg[0]+reg[p]+u[0];
               u[0]=x/0x100;
               c=1;
               u[2]=sign(reg[0]);
               u[1]=zeros(reg[0]);
               u[3]=parity(reg[0]);
               break;
           }
       }
       if(RAM[reg1[0]]==arr[7])
       {
           int x=((reg[0]&0XFF)+(RAM[mem]&0XFF)+u[0]);
           u[4]=auxcarry(reg[0],RAM[mem]+u[0]);
           reg[0]=reg[0]+RAM[mem]+u[0];
           u[0]=x/0x100;
           c=1;
           u[2]=sign(reg[0]);
           u[1]=zeros(reg[0]);
           u[3]=parity(reg[0]);
       }
    return c;
}
int subtractionone(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    char q=0;
    int mem=((reg[5]&0XFF)*0x100)+(reg[6]&0XFF);
    for(int p=0;p<=6;p++)
       {
           if(RAM[reg1[0]]==arr[p])
           {
               if(reg[0]<reg[p])
               {
                   u[0]=1;
                   u[4]=auxcarry1(reg[0],reg[p]);
                   reg[0]+=(reg[p]^0xFF)+1;
               }
               else
               {
                   u[0]=0;
                   u[4]=auxcarry1(reg[0],reg[p]);
                   reg[0]-=reg[p];
               }
               c=1;
              u[2]=sign(reg[0]);
              u[1]=zeros(reg[0]);
              u[3]=parity(reg[0]);
               break;
           }
       }
       if(RAM[reg1[0]]==arr[7])
       {
           q=RAM[mem];
           if(reg[0]<q)
           {
               u[0]=1;
               u[4]=auxcarry1(reg[0],RAM[mem]);
               reg[0]+=(RAM[mem]^0XFF)+1;

           }
           else
           {
               u[0]=0;
               u[4]=auxcarry1(reg[0],RAM[mem]);
               reg[0]-=RAM[mem];
           }
           c=1;
          u[2]=sign(reg[0]);
          u[1]=zeros(reg[0]);
          u[3]=parity(reg[0]);
       }
       return c;
}
int subtractiononewithb(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    int mem=((reg[5]&0xff)*0x100)+(reg[6]&0xff);
    char q=0;
    for(int p=0;p<=6;p++)
       {
           if(RAM[reg1[0]]==arr[p])
           {
               if(reg[0]<(reg[p]+u[0]))
               {
                   u[4]=auxcarry1(reg[0],reg[p]+u[0]);
                   reg[0]+=((reg[p]+u[0])^0XFF)+1;
                   u[0]=1;
               }
               else
               {
                   u[4]=auxcarry1(reg[0],reg[p]+u[0]);
                   reg[0]-=(reg[p]+u[0]);
                   u[0]=0;
               }
               c=1;
               u[2]=sign(reg[0]);
               u[1]=zeros(reg[0]);
              u[3]=parity(reg[0]);
               break;
           }
       }
       q=RAM[mem]+u[0];
       if(RAM[reg1[0]]==arr[7])
       {
           if(reg[0]<q)
           {
               u[4]=auxcarry1(reg[0],RAM[mem]+u[0]);
               reg[0]+=((RAM[mem]+u[0])^0XFF)+1;
               u[0]=1;
           }
           else
           {
               u[4]=auxcarry1(reg[0],RAM[mem]+u[0]);
               reg[0]-=(RAM[mem]+u[0]);
               u[0]=0;
           }
           c=1;
           u[2]=sign(reg[0]);
           u[1]=zeros(reg[0]);
           u[3]=parity(reg[0]);
       }
       return c;
}
int increment(int arr[8],char reg[7],unsigned int reg1[0],unsigned char RAM[0xFFFF],int u[4])
{
    int c=0;
    int mem=((reg[5]&0XFF)*0x100)+(reg[6]&0XFF);
    for(int p=0;p<=6;p++)
       {
           if(RAM[reg1[0]]==arr[p])
           {
               u[4]=auxcarry(reg[p],1);
               reg[p]+=1;
               u[2]=sign(reg[p]);
               u[1]=zeros(reg[p]);
               u[3]=parity(reg[p]);
               c=1;
               break;
           }
       }
       if(RAM[reg1[0]]==arr[7])
           {
               u[4]=auxcarry(RAM[mem],1);
               RAM[mem]=RAM[mem]+1;
               u[2]=sign(RAM[mem]);
               u[1]=zeros(RAM[mem]);
               u[3]=parity(RAM[mem]);
               c=1;
           }
           return c;
}
int decrement(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    int mem=((reg[5]&0XFF)*0x100)+(reg[6]&0XFF);
    char q=0;
    for(int p=0;p<=6;p++)
       {
           if(RAM[reg1[0]]==arr[p])
           {
               if(reg[p]>1)
               {
                 u[4]=auxcarry1(reg[p],1);
                 reg[p]-=1;
               }
               else
               {
                   u[4]=auxcarry1(reg[p],1);
                   reg[p]+=0XFF;
               }
               c=1;
               u[2]=sign(reg[p]);
               u[1]=zeros(reg[p]);
               u[3]=parity(reg[p]);
               break;
           }
       }
       q=RAM[mem];
       if(RAM[reg1[0]]==arr[7])
           {
               if(q>1)
               {
                u[4]=auxcarry1(RAM[mem],1);
                RAM[mem]=RAM[mem]-1;
               }
               else
               {
                   u[4]=auxcarry1(RAM[mem],1);
                   RAM[mem]+=0XFF;
               }
               c=1;
               u[2]=sign(RAM[mem]);
               u[1]=zeros(RAM[mem]);
               u[3]=parity(RAM[mem]);
           }
           return c;
}
int logical(int arr[8],int b,char reg[7],unsigned int reg1[0],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    int mem=((reg[5]&0XFF)*0x100)+(reg[6]&0XFF);
       for(int p=0;p<=6;p++)
       {
           if(RAM[reg1[0]]==arr[p])
           {
               if(b==15)
               {
                 reg[0]&=reg[p];
               }
               else if(b==16)
               {
                   reg[0]|=reg[p];
               }
               else
               {
                   reg[0]^=reg[p];
               }
                c=1;
                u[0]=0;
                u[2]=sign(reg[0]);
                u[1]=zeros(reg[0]);
                u[3]=parity(reg[0]);
                u[4]=0;
                break;
           }
       }
       if(RAM[reg1[0]]==arr[7])
       {
            if(b==15)
               {
                 reg[0]&=RAM[mem];
               }
               else if(b==16)
               {
                   reg[0]|=RAM[mem];
               }
               else
               {
                   reg[0]^=RAM[mem];
               }
           c=1;
           u[0]=0;
           u[2]=sign(reg[0]);
           u[1]=zeros(reg[0]);
           u[3]=parity(reg[0]);
           u[4]=0;
       }
   return c;
}
int compare(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int diff=0;
    int c=0;
    int mem=((reg[5]&0XFF)*0x100)+(reg[6]&0XFF);
    char q=0;
    for(int p=0;p<=6;p++)
       {
           if(RAM[reg1[0]]==arr[p])
           {
               if(reg[0]<reg[p])
               {
                   u[0]=1;
                   u[1]=0;
                   u[2]=1;
                   diff=(reg[0]&0XFF)+((reg[p]^0XFF)&0XFF)+1;
                   u[3]=parity(diff);
                   u[4]=auxcarry1(reg[0],reg[p]);
               }
               else if(reg[0]==reg[p])
               {
                   u[0]=0;
                   u[1]=1;
                   u[2]=0;
                   u[3]=0;
                   u[4]=0;
               }
               else
               {
                   u[0]=0;
                   u[1]=0;
                   u[2]=0;
                   diff=(reg[0]&0XFF)-(reg[p]&0XFF);
                   u[3]=parity(diff);
                   u[4]=auxcarry1(reg[0],reg[p]);
               }
               c=1;
               break;
           }
       }
       q=RAM[mem];
       if(RAM[reg1[0]]==arr[7])
       {
           if(reg[0]<q)
           {
               u[0]=1;
               u[1]=0;
               u[2]=1;
               diff=(reg[0]&0XFF)+((RAM[mem]^0XFF)&0XFF)+1;
               u[3]=parity(diff);
               u[4]=auxcarry1(reg[0],RAM[mem]);
           }
           else if(reg[0]==RAM[mem])
           {
               u[0]=0;
               u[1]=1;
               u[2]=0;
               u[3]=0;
               u[4]=0;
           }
           else
           {
               u[0]=0;
               u[1]=0;
               u[2]=0;
               diff=(reg[0]&0XFF)-(RAM[mem]&0XFF);
               u[3]=parity(diff);
               u[4]=auxcarry1(reg[0],RAM[mem]);
           }
           c=1;
       }
       return c;
}
int reset(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    int mem=((reg[5]&0XFF)*0x100)+(reg[6]&0XFF);
    for(int p=0X0;p<=0X7;p++)
       {
           if(RAM[reg1[0]]==arr[p])
           {
               reg1[0]=p*(0X08);
               c=1;
               break;
           }
       }
    return c;
}
int loadstore(int arr[8],int b,char reg[7],unsigned int reg1[2],unsigned char RAM[0xFFFF])
{
    int c=0;
    int mem =0;
    if((b==20)||(b==21))
    {
        for(int p=0;p<=7;p++)
        {
           if(RAM[reg1[0]]==arr[p])
           {
             mem=reg[p]*0X100+reg[p+1];
             if(b==20)
             {
              reg[0]=RAM[mem];
             }
             else
             {
                 RAM[mem]=reg[0];
             }
             c=1;
             break;
           }
        }
    }
    if(b==22)
    {
        for(int p=0;p<=6;p++)
        {
            if(RAM[reg1[0]]==arr[p])
            {
                reg[p]=RAM[reg1[0]+1];
                reg[p+1]=RAM[reg1[0]+2];
                c=1;
                reg1[0]=reg1[0]+2;
                break;
            }
        }
        if(RAM[reg1[0]]==arr[7])
        {
            mem=RAM[reg1[0]+1]*0x100+RAM[reg1[0]+2];
            mem=mem&0XFFFF;
            reg1[1]=mem;
            c=1;
            reg1[0]=reg1[0]+2;
        }
    }
    return c;
}
int loadsdirect(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF])
{
    int c=0;
    int mem=RAM[reg1[0]+1]*0x100+RAM[reg1[0]+2];
    mem=mem&0XFFFF;
    if(RAM[reg1[0]]==arr[0])
    {
        reg[0]=RAM[mem];
        reg1[0]=reg1[0]+2;
        c=1;
    }
    else if(RAM[reg1[0]]==arr[1])
    {
        RAM[mem]=reg[0];
        reg1[0]=reg1[0]+2;
        c=1;
    }
    else if(RAM[reg1[0]]==arr[2])
    {
        reg[5]=RAM[mem+1];
        reg[6]=RAM[mem];
        reg1[0]=reg1[0]+2;
        c=1;
    }
    else if(RAM[reg1[0]]==arr[3])
    {
        RAM[mem]=reg[6];
        RAM[mem+1]=reg[5];
        reg1[0]=reg1[0]+2;
        c=1;
    }
    return c;
}
int addimmediate(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    if(RAM[reg1[0]]==arr[0])
    {
        int x=(reg[0]&0XFF)+(RAM[reg1[0]+1]&0XFF);
        u[4]=auxcarry(reg[0],RAM[reg[0]+1]);
        reg[0]+=RAM[reg1[0]+1];
        u[0]=x/0x100;
        c=1;
        reg1[0]=reg1[0]+1;
        u[2]=sign(reg[0]);
        u[1]=zeros(reg[0]);
        u[3]=parity(reg[0]);
    }
    if(RAM[reg1[0]]==arr[1])
    {
        int x=(reg[0]&0XFF)+(RAM[reg1[0]+1]&0XFF)+u[0];
        u[4]=auxcarry(reg[0],RAM[reg[0]+1]+u[0]);
        reg[0]+=(RAM[reg1[0]+1]+u[0]);
        u[0]=x/0x100;
        c=1;
        reg1[0]=reg1[0]+1;
        u[2]=sign(reg[0]);
        u[1]=zeros(reg[0]);
        u[3]=parity(reg[0]);
    }
    return c;
}
int subimmediate(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    char q=0;
    if(RAM[reg1[0]]==arr[0])
    {
        q=RAM[reg1[0]+1];
        if(reg[0]<q)
        {
            u[4]=auxcarry1(reg[0],RAM[reg1[0]+1]);
            reg[0]+=(RAM[reg1[0]+1]^0XFF)+1;
            u[0]=1;
        }
        else
        {
            u[4]=auxcarry1(reg[0],RAM[reg1[0]+1]);
            reg[0]-=RAM[reg1[0]+1];
            u[0]=0;
        }
        c=1;
        reg1[0]=reg1[0]+1;
        u[2]=sign(reg[0]);
        u[1]=zeros(reg[0]);
        u[3]=parity(reg[0]);
    }
    else if(RAM[reg1[0]]==arr[1])
    {
        q=RAM[reg1[0]+1]+u[0];
        if(reg[0]<q)
        {
            u[4]=auxcarry1(reg[0],RAM[reg1[0]+1]+u[0]);
            reg[0]+=(((RAM[reg1[0]+1]+u[0])^0XFF)+1);
            u[0]=1;
        }
        else
        {
            u[4]=auxcarry1(reg[0],RAM[reg1[0]+1]+u[0]);
            reg[0]-=(RAM[reg1[0]+1]+u[0]);
            u[0]=0;
        }
        c=1;
        reg1[0]=reg1[0]+1;
        u[2]=sign(reg[0]);
        u[1]=zeros(reg[0]);
        u[3]=parity(reg[0]);
    }
    return c;
}
int logicalimmediate(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    if(RAM[reg1[0]]==arr[0])
    {
        reg[0]&=RAM[reg1[0]+1];
        reg1[0]=reg1[0]+1;
        c=1;
        u[0]=0;
        u[4]=0;
        u[2]=sign(reg[0]);
        u[1]=zeros(reg[0]);
        u[3]=parity(reg[0]);
    }
    else if(RAM[reg1[0]]==arr[1])
    {
        reg[0]^=RAM[reg1[0]+1];
        reg1[0]=reg1[0]+1;
        c=1;
        u[0]=0;
        u[4]=0;
        u[2]=sign(reg[0]);
        u[1]=zeros(reg[0]);
        u[3]=parity(reg[0]);
    }
    else if(RAM[reg1[0]]==arr[2])
    {
        reg[0]|=RAM[reg1[0]+1];
        reg1[0]=reg1[0]+1;
        c=1;
        u[0]=0;
        u[4]=0;
        u[2]=sign(reg[0]);
        u[1]=zeros(reg[0]);
        u[3]=parity(reg[0]);
    }
    return c;
}
int compareimmediate(int b,char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    char q=0;
    int diff=0;
    if(RAM[reg1[0]]==0XFE)
    {
        q=RAM[reg1[0]+1];
        if(reg[0]<q)
        {
            c=1;
            u[0]=1;
            u[1]=0;
            diff=((reg[0]&0XFF)+((q^0XFF)+1)&0XFF);
            u[2]=sign(diff);
            u[3]=parity(diff);
            u[4]=auxcarry1(reg[0],RAM[reg1[0]+1]);
            reg1[0]=reg1[0]+1;
        }
        else if(reg[0]==q)
        {
            c=1;
            u[0]=0;
            u[1]=1;
            u[2]=0;
            u[3]=0;
            u[4]=0;
            reg1[0]=reg1[0]+1;
        }
        else
        {
            c=1;
            u[0]=0;
            u[1]=0;
            u[2]=0;
            diff=(reg[0]&0XFF)-(q&0XFF);
            u[3]=parity(diff);
            u[4]=auxcarry1(reg[0],RAM[reg1[0]+1]);
            reg1[0]=reg1[0]+1;
        }
        return c;
    }
}
int incanddec(int arr[8],int b,char reg[7],unsigned int reg1[0],unsigned char RAM[0XFFFF])
{
    int c=0;
    int mem=0;
    for(int p=0;p<=6;p++)
    {
      if(RAM[reg1[0]]==arr[p])
      {
        mem=(reg[p]&0XFF)*0x100+(reg[p+1]&0XFF);
        if(b==28)
        {
          mem+=1;
        }
        else
        {
           if(mem>=1)
           {
             mem-=1;
           }
           else
           {
               mem+=0XFFFF;
           }
        }
        reg[p]=mem/0x100;
        reg[p+1]=mem%0x100;
        c=1;
        break;
      }
    }
      if(RAM[reg1[0]]==arr[7])
      {
          if(b==28)
          {
              reg1[1]=reg1[1]%0x10000;
          }
          else
          {
              if(reg1[1]<1)
              {
                  reg1[1]+=0XFFFF;
              }
              else
              {
                  reg1[1]-=1;
              }
          }
          c=1;
      }
      return c;
}
int dad(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    int mem=0;
    int q=(reg[5]&0XFF)*0X100+(reg[6]&0XFF);
    for(int p=0;p<=6;p++)
    {
      if(RAM[reg1[0]]==arr[p])
      {
       mem=(reg[p]&0XFF)*0x100+(reg[p+1]&0XFF);
       mem+=q;
       u[0]=mem/0X10000;
       reg[5]=mem/0x100;
       reg[6]=mem%0x100;
       c=1;
       break;
      }
    }
    if(RAM[reg1[0]]==arr[7])
    {
        mem=reg1[1]+q;
        u[0]=mem/0x10000;
        reg[5]=mem/0x100;
        reg[6]=mem%0x100;
        c=1;
    }
    return c;
}
int push(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    for(int p=0;p<=6;p++)
    {
        if(RAM[reg1[0]]==arr[p])
        {
            RAM[reg1[1]-1]=reg[p];
            RAM[reg1[1]-2]=reg[p+1];
            c=1;
            reg1[1]=reg1[1]-2;
            break;
        }
    }
    if(RAM[reg1[0]]==arr[7])
    {
        RAM[reg1[1]-1]=reg[0];
        RAM[reg1[1]-2]=flagreg(u);
        c=1;
        reg1[1]=reg1[1]-2;
    }
    return c;
}
int pop(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    for(int p=0;p<=6;p++)
    {
        if(RAM[reg1[0]]==arr[p])
        {
            reg[p+1]=RAM[reg1[1]];
            reg[p]=RAM[reg1[1]+1];
            c=1;
            reg1[1]=reg1[1]+2;
            break;
        }
    }
    if(RAM[reg1[0]]==arr[7])
    {
        reg[0]=RAM[reg1[1]+1];
        flagdiv(u,RAM[reg1[1]]);
        c=1;
        reg1[1]=reg1[1]+2;
    }
    return c;
}
int call(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    int mem=RAM[reg1[0]+1]*0x100+RAM[reg1[0]+2];
    if(RAM[reg1[0]]==arr[0])
    {
        c=1;
        RAM[reg1[1]-1]=(reg1[0]+3)/0x100;
        RAM[reg1[1]-2]=(reg1[0]+3)%0x100;
        reg1[1]-=2;
        reg1[0]=mem-1;
    }
    if(RAM[reg1[0]]==arr[4])
    {
        if(u[0]==1)
        {
            RAM[reg1[1]-1]=(reg1[0]+3)/0x100;
            RAM[reg1[1]-2]=(reg1[0]+3)%0x100;
            reg1[1]-=2;
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[3])
    {
        if(u[0]==0)
        {
            RAM[reg1[1]-1]=(reg1[0]+3)/0x100;
            RAM[reg1[1]-2]=(reg1[0]+3)%0x100;
            reg1[1]-=2;
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[2])
    {
        if(u[1]==1)
        {
            RAM[reg1[1]-1]=(reg1[0]+3)/0x100;
            RAM[reg1[1]-2]=(reg1[0]+3)%0x100;
            reg1[1]-=2;
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[1])
    {
        if(u[1]==0)
        {
            RAM[reg1[1]-1]=(reg1[0]+3)/0x100;
            RAM[reg1[1]-2]=(reg1[0]+3)%0x100;
            reg1[1]-=2;
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[5])
    {
        if(u[3]==0)
        {
            RAM[reg1[1]-1]=(reg1[0]+3)/0x100;
            RAM[reg1[1]-2]=(reg1[0]+3)%0x100;
            reg1[1]-=2;
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[6])
    {
        if(u[3]==1)
        {
            RAM[reg1[1]-1]=(reg1[0]+3)/0x100;
            RAM[reg1[1]-2]=(reg1[0]+3)%0x100;
            reg1[1]-=2;
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[7])
    {
        if(u[2]==0)
        {
            RAM[reg1[1]-1]=(reg1[0]+3)/0x100;
            RAM[reg1[1]-2]=(reg1[0]+3)%0x100;
            reg1[1]-=2;
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==0XFC)
    {
        if(u[2]==1)
        {
            RAM[reg1[1]-1]=(reg1[0]+3)/0x100;
            RAM[reg1[1]-2]=(reg1[0]+3)%0x100;
            reg1[1]-=2;
            reg1[0]=mem-1;
        }
        c=1;
    }
    return c;
}
int jump(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    int mem=RAM[reg1[0]+1]*0x100+RAM[reg1[0]+2];
    if(RAM[reg1[0]]==arr[0])
    {
        c=1;
        reg1[0]=mem-1;
    }
    if(RAM[reg1[0]]==arr[4])
    {
        if(u[0]==1)
        {
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[3])
    {
        if(u[0]==0)
        {
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[2])
    {
        if(u[1]==1)
        {
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[1])
    {
        if(u[1]==0)
        {
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[5])
    {
        if(u[3]==0)
        {
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[6])
    {
        if(u[3]==1)
        {
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[7])
    {
        if(u[2]==0)
        {
            reg1[0]=mem-1;
        }
        c=1;
    }
    if(RAM[reg1[0]]==0XFA)
    {
        if(u[2]==1)
        {
            reg1[0]=mem-1;
        }
        c=1;
    }
    return c;
}
int ret(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    int mem=RAM[reg1[1]]+RAM[reg1[1]+1]*0x100;
    if(RAM[reg1[0]]==arr[0])
    {
        c=1;
        reg1[0]=mem-1;
        reg1[1]+=2;
    }
    if(RAM[reg1[0]]==arr[4])
    {
        if(u[0]==1)
        {
            reg1[0]=mem-1;
            reg1[1]+=2;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[3])
    {
        if(u[0]==0)
        {
            reg1[0]=mem-1;
            reg1[1]+=2;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[2])
    {
        if(u[1]==1)
        {
            reg1[0]=mem-1;
            reg1[1]+=2;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[1])
    {
        if(u[1]==0)
        {
            reg1[0]=mem-1;
            reg1[1]+=2;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[5])
    {
        if(u[3]==0)
        {
            reg1[0]=mem-1;
            reg1[1]+=2;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[6])
    {
        if(u[3]==1)
        {
            reg1[0]=mem-1;
            reg1[1]+=2;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[7])
    {
        if(u[2]==0)
        {
            reg1[0]=mem-1;
            reg1[1]+=2;
        }
        c=1;
    }
    if(RAM[reg1[0]]==0XF8)
    {
        if(u[2]==1)
        {
            reg1[0]=mem-1;
            reg1[1]+=2;
        }
        c=1;
    }
    return c;
}
int exchangeset(int arr[8],char reg[7],unsigned int reg1[2],unsigned char RAM[0XFFFF],int u[4])
{
    int c=0;
    if(RAM[reg1[0]]==arr[0])
    {
        int temp1=0;
        int temp2=0;
        temp1=reg[3];
        temp2=reg[4];
        reg[3]=reg[5];
        reg[4]=reg[6];
        reg[5]=temp1;
        reg[6]=temp2;
        c=1;
    }
    if(RAM[reg1[0]]==arr[1])
    {
        if(((reg[0]&0xff)%0x10)>0x9)
        {
            reg[0]=(reg[0]&0XFF)+0X06;
        }
        c=1;
    }
    if(RAM[reg1[0]]==arr[2])
    {
        c=1;
        reg[0]=(reg[0]&0XFF)^0XFF;
    }
    if(RAM[reg1[0]]==arr[3])
    {
        c=1;
        u[0]=!u[0];
    }
    if(RAM[reg1[0]]==arr[4])
    {
        c=1;
        u[0]=1;
    }
    if(RAM[reg1[0]]==arr[5])
    {
        c=1;
        int mem=(reg[5]&0XFFFF)*0x100+(reg[6]&0XFFFF);
        reg1[0]=mem;
    }
    if(RAM[reg1[0]]==arr[6])
    {
        c=1;
        reg[0]=RAM[RAM[reg1[0]+1]];
        reg1[0]=reg1[0]+1;
    }
    if(RAM[reg1[0]]==arr[7])
    {
        c=1;
       RAM[RAM[reg1[0]+1]]=reg[0];
        reg1[0]=reg1[0]+1;
    }
    if(RAM[reg1[0]]==0XE3)
    {
        c=1;
        reg[5]=RAM[reg1[1]+1];
        reg[6]=RAM[reg1[1]];
        reg1[1]-=2;
    }
    if(RAM[reg1[0]]==0XF9)
    {
        c=1;
        RAM[reg1[1]-1]=reg[5];
        RAM[reg1[1]-2]=reg[6];
    }
    return 0;
}
int main()
{
    unsigned char RAM[0xFFFF]={};
    char reg[7]={0x20,0x30,0x40,0x50,0x60,0x70,0x80};
    unsigned int reg1[2]={0X8000,0XFFFF};
    int u[5]={};
    int n=0;
    char ch[50]={};
    char ab[20]={};
    int l=0;
    int num=0;
    int arr[8]={};
    while(n!=1)
    {
        int i=0;
        int s=0;
        printf(":");
        gets(ch);
        nulling(ab);
        if(ch[i]==108)
        {
            i++;
            i=spacing(i,ch);
            l=strlen(ch);
            transfer(i,ab,ch,l);
            FILE *fp;
            fp=fopen(ab,"rb");
            if(fp==NULL)
            {
                printf("the file does not exist");
                printf("\n");
            }
            else
            {
                int h=0x8000;
                while(!feof(fp))
                {
                    fread(&RAM[h],sizeof(char),1,fp);
                    h++;
                }
                reg1[1]=h-2;
                reg1[0]=0X8000;
            }
        }
        else if(ch[i]==114)
        {
            i++;
            i=spacing(i,ch);
            char ch1[9]="ABCDEHLPS";
            if(ch[i]==0)
            {
                int j=0;
                for(;j<=6;j++)
                {
                    printf("%c",ch1[j]);
                    printf(":%x\n",reg[j]&0XFF);
                }
                for(int o=0;o<=1;o++)
                {
                    printf("%c",ch1[j]);
                    printf(":%x\n",reg1[o]);
                    j++;
                }
            }
            else
            {
                 int k=0;
                 for(int j=0;j<=8;j++)
                 {
                     if(ch[i]==ch1[j])
                     {
                        s=1;
                        k=j;
                     }
                 }
                 if(s==1)
                 {
                     printf("%c",ch1[k]);
                     printf(":");
                     if(k<=6)
                     {
                      int x;
                      scanf("%x",&x);
                      reg[k]=(char)x;
                     }
                     else
                     {
                         int q=(k%6)-1;
                         scanf("%x",&reg1[q]);
                     }
                 }
                 else
                 {
                     printf("invalid register\n");
                 }
            }
        }
        else if(ch[i]==100)
        {
            i++;
            i=spacing(i,ch);
            l=strlen(ch);
            transfer(i,ab,ch,l);
            printf("%s",ab);
            printf(":");
            num=convert(i,l,ch);
            s=1;
            if(num<=0xFFFF)
            {
              for(int j=num;j<=num+0x7F;j++)
              {
                 printf("%x  ",RAM[j]);
                 s++;
                 if((s>16)&&j<num+0x7F)
                 {
                     s%=16;
                     printf("\n");
                     convert1(ab,j+1);
                     printf("%s",ab);
                     printf(":");
                 }
              }
            }
            else
            {
                printf("invalid memory address");
            }
            printf("\n");
        }
        else if(ch[i]==109)
        {
            int u=0;
            i++;
            i=spacing(i,ch);
            l=strlen(ch);
            transfer(i,ab,ch,l);
            printf("%s",ab);
            printf(":");
            num=convert(i,l,ch);
            scanf("%x",&u);
            RAM[num]=(char)u;
        }
        else if((ch[i]==103)||(ch[i]==115))
        {
            while((RAM[reg1[0]]!=0x76)&&(s!=1))
            {
                int b=0;
                int d=0;
                switch (b)
            {
                case 0:
                        arrayassign(arr,0X7F,0X78,0X79,0X7A,0X7B,0X7C,0X7D,0X7E);
                        d=assignment(arr,0,reg,reg1,RAM);
                        if(d==1)
                        {
                            break;
                        }
                case 1:
                        arrayassign(arr,0X47,0X40,0X41,0X42,0X43,0X44,0X45,0X46);
                        d=assignment(arr,1,reg,reg1,RAM);
                        if(d==1)
                        {
                            break;
                        }
                case 2:
                        arrayassign(arr,0X4F,0X48,0X49,0X4A,0X4B,0X4C,0X4D,0X4E);
                        d=assignment(arr,2,reg,reg1,RAM);
                        if(d==1)
                        {
                            break;
                        }
                case 3:
                        arrayassign(arr,0X57,0X50,0X51,0X52,0X53,0X54,0X55,0X56);
                        d=assignment(arr,3,reg,reg1,RAM);
                        if(d==1)
                        {
                            break;
                        }
                case 4:
                        arrayassign(arr,0X5F,0X58,0X59,0X5A,0X5B,0X5C,0X5D,0X5E);
                        d=assignment(arr,4,reg,reg1,RAM);
                        if(d==1)
                        {
                            break;
                        }
                case 5:
                        d=assignment(arr,5,reg,reg1,RAM);
                        arrayassign(arr,0X6F,0X68,0X69,0X6A,0X6B,0X6C,0X6D,0X6E);
                         if(d==1)
                        {
                            break;
                        }
                case 6:
                        arrayassign(arr,0X67,0X60,0X61,0X62,0X63,0X64,0X65,0X66);
                        d=assignment(arr,6,reg,reg1,RAM);
                         if(d==1)
                        {
                            break;
                        }
                case 7:
                        arrayassign(arr,0X77,0X70,0X71,0X72,0X73,0X74,0X75,0X00);
                        d=assignment(arr,7,reg,reg1,RAM);
                         if(d==1)
                        {
                            break;
                        }
                case 8:
                         arrayassign(arr,0X3E,0X06,0XE,0X16,0X1E,0X26,0X2E,0X36);
                         d=assignment(arr,8,reg,reg1,RAM);
                         if(d==1)
                        {
                            break;
                        }
                case 9:
                        arrayassign(arr,0X87,0X80,0X81,0X82,0X83,0X84,0X85,0X86);
                        d=additionone(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 10:
                        arrayassign(arr,0X8F,0X88,0X89,0X8A,0X8B,0X8C,0X8D,0X8E);
                        d=additiononewithc(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 11:
                        arrayassign(arr,0X97,0X90,0X91,0X92,0X93,0X94,0X95,0X96);
                        d=subtractionone(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 12:
                        arrayassign(arr,0X9F,0X98,0X99,0X9A,0X9B,0X9C,0X9D,0X9E);
                        d=subtractiononewithb(arr,reg,reg1,RAM,u);
                         if(d==1)
                        {
                            break;
                        }
                case 13:
                        arrayassign(arr,0X3C,0X04,0X0C,0X14,0X1C,0X24,0X2C,0X34);
                        d=increment(arr,reg,reg1,RAM,u);
                         if(d==1)
                        {
                            break;
                        }
                case 14:
                        arrayassign(arr,0X3D,0X05,0X0D,0X15,0X1D,0X25,0X2D,0X35);
                        d=decrement(arr,reg,reg1,RAM,u);
                         if(d==1)
                        {
                            break;
                        }
                case 15:
                        arrayassign(arr,0XA7,0XA0,0XA1,0XA2,0XA3,0XA4,0XA5,0XA6);
                        d=logical(arr,15,reg,reg1,RAM,u);
                         if(d==1)
                        {
                            break;
                        }
                case 16:
                        arrayassign(arr,0XB7,0XB0,0XB1,0XB2,0XB3,0XB4,0XB5,0XB6);
                        d=logical(arr,16,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 17:
                        arrayassign(arr,0XAF,0XA8,0XA9,0XAA,0XAB,0XAC,0XAD,0XAE);
                        d=logical(arr,17,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 18:
                         arrayassign(arr,0XBF,0XB8,0XB9,0XBA,0XBB,0XBC,0XBD,0XBE);
                         d=compare(arr,reg,reg1,RAM,u);
                         if(d==1)
                        {
                            break;
                        }
                case 19:
                        arrayassign(arr,0XC7,0XCF,0XD7,0XDF,0XE7,0XEF,0XF7,0XFF);
                        d=reset(arr,reg,reg1,RAM,u);
                         if(d==1)
                        {
                            break;
                        }
                case 20:
                        arrayassign(arr,0x0,0x0a,0x0,0x1a,0x0,0x0,0x0,0x0);
                        d=loadstore(arr,20,reg,reg1,RAM);
                        if(d==1)
                        {
                            break;
                        }
                case 21:
                        arrayassign(arr,0x0,0x02,0x0,0x12,0x0,0x0,0x0,0x0);
                        d=loadstore(arr,21,reg,reg1,RAM);
                        if(d==1)
                        {
                            break;
                        }
                case 22:
                        arrayassign(arr,0X0,0X01,0X0,0X11,0X0,0X21,0X0,0X31);
                        d=loadstore(arr,22,reg,reg1,RAM);
                        if(d==1)
                        {
                            break;
                        }
                case 23:
                        arrayassign(arr,0X3A,0X32,0X2A,0X22,0X0,0X0,0X0,0X0);
                        d=loadsdirect(arr,reg,reg1,RAM);
                        if(d==1)
                        {
                            break;
                        }
                case 24:
                        arrayassign(arr,0XC6,0XCE,0X0,0X0,0X0,0X0,0X0,0X0);
                        d=addimmediate(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 25:
                        arrayassign(arr,0XD6,0XDE,0X0,0X0,0X0,0X0,0X0,0X0);
                        d=subimmediate(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 26:
                        arrayassign(arr,0XE6,0XEE,0XF6,0X0,0X0,0X0,0X0,0X0);
                        d=logicalimmediate(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 27:
                        d=compareimmediate(27,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 28:
                        arrayassign(arr,0X0,0X03,0X0,0X13,0X0,0X23,0X0,0X33);
                        d=incanddec(arr,28,reg,reg1,RAM);
                        if(d==1)
                        {
                            break;
                        }
                case 29:
                        arrayassign(arr,0x0,0x0B,0X0,0X1B,0X0,0X2B,0X0,0X3B);
                        d=incanddec(arr,29,reg,reg1,RAM);
                        if(d==1)
                        {
                            break;
                        }
                case 30:
                        arrayassign(arr,0X0,0X09,0X0,0X19,0X0,0X29,0X0,0X39);
                        d=dad(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 31:
                        arrayassign(arr,0X0,0XC5,0X0,0XD5,0X0,0XE5,0X0,0XF5);
                        d=push(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 32:
                        arrayassign(arr,0X0,0XC1,0X0,0XD1,0X0,0XE1,0X0,0XF1);
                        d=pop(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 33:
                        arrayassign(arr,0XCD,0XC4,0XCC,0XD4,0XDC,0XE4,0XEC,0XF4);
                        d=call(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 34:
                        arrayassign(arr,0XC9,0XC0,0XC8,0XD0,0XD8,0XE0,0XE8,0XF0);
                        d=ret(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 35:
                        arrayassign(arr,0XC3,0XC2,0XCA,0XD2,0XDA,0XE2,0XEA,0XF2);
                        d=jump(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                case 36:
                        arrayassign(arr,0XEB,0X27,0X2F,0X3F,0X37,0XE9,0XDB,0XD3);
                        d=exchangeset(arr,reg,reg1,RAM,u);
                        if(d==1)
                        {
                            break;
                        }
                }
                for(int i=0;i<=4;i++)
                {
                    printf("%d\n",u[i]);
                }
                reg1[0]=reg1[0]+1;
                if(ch[i]==115)
                {
                    s=1;
                }
            }
            if(RAM[reg1[0]]==0x76)
            {
                reg1[0]=0x8000;
            }
        }
        else if(ch[i]==113)
        {
            n=1;
        }
    }
}

